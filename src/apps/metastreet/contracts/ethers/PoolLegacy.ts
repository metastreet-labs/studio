/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Pool {
  export type DepositStruct = {
    shares: PromiseOrValue<BigNumberish>;
    redemptionPending: PromiseOrValue<BigNumberish>;
    redemptionIndex: PromiseOrValue<BigNumberish>;
    redemptionTarget: PromiseOrValue<BigNumberish>;
  };

  export type DepositStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    shares: BigNumber;
    redemptionPending: BigNumber;
    redemptionIndex: BigNumber;
    redemptionTarget: BigNumber;
  };
}

export interface PoolLegacyInterface extends utils.Interface {
  functions: {
    'deposits(address,uint128)': FunctionFragment;
    'redemptionAvailable(address,uint128)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'deposits' | 'redemptionAvailable'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deposits',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redemptionAvailable',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redemptionAvailable', data: BytesLike): Result;

  events: {};
}

export interface PoolLegacy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolLegacyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[Pool.DepositStructOutput]>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; amount: BigNumber }>;
  };

  deposits(
    account: PromiseOrValue<string>,
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<Pool.DepositStructOutput>;

  redemptionAvailable(
    account: PromiseOrValue<string>,
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; amount: BigNumber }>;

  callStatic: {
    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<Pool.DepositStructOutput>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; amount: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
